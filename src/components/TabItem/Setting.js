import React, { useState, useEffect } from 'react';
import {
    Container,
    Typography,
    TextField,
    Button,
    Grid,
    TableContainer,
    Table,
    TableBody,
    TableRow,
    TableCell,
    Toolbar,
} from '@mui/material';
import DialogCommon from '../DialogCommon';
import '../../assets/styles/common.scss';

import { useTapbotContext } from '../../context/TapbotContext';

import { Logger } from '../../utils/Logger';
const logger = new Logger('debug', false);
logger.setLevel('debug');

// const tapInfo = {
//     partSizeX: work.partSizeX,
//     partSizeY: work.partSizeY,
//     partThickness: work.partThickness, // Í∞ÄÍ≥µÎ¨º ÎëêÍªò
//     initialHeight: 5.0, // ÏãúÏûë ÏúÑÏπò (ÎÜíÏù¥) - initialHeight
//     machiningAllowance: 5.0, // Í∞ÄÍ≥µ Ïó¨Ïú† ==> Ïã§ Í∞ÄÍ≥µ depth = partThickness + machiningAllowance
//     chamferLength: 3.0
// };

const Setting = () => {
    const [settings, setSettings] = useState({
        initialHeight: 5.0, // "ÏãúÏûë ÏúÑÏπò (ÎÜíÏù¥) - initialHeight" ==> tapping_start_pos = workPiece_surface_pos[2] + initialHeight
        partThickness: 1.6,
        chamferLength: 1.8, // Ïã§ Í∞ÄÍ≥µ ÍπäÏù¥ ==> chamferLength + partThickness + machiningAllowance (Ï∂îÍ∞Ä Í∞ÄÍ≥µ Ïó¨Ïú†)
        machiningAllowance: 1.8, // Í∞ÄÍ≥µ Ïó¨Ïú† ==> Ïã§ Í∞ÄÍ≥µ depth = partThickness + machiningAllowance
    });

    const [openConfirmSaveDialog, setOpenConfirmSaveDialog] = useState(false);
    const [loadingDialog, setLoadingDialog] = useState(false);

    const { setActiveScreen } = useTapbotContext();

    useEffect(() => {
        setActiveScreen('Setting');

        return () => {
            // console.log('üóëÔ∏è Setting Ïñ∏ÎßàÏö¥Ìä∏Îê®!');
        };
    }, [setActiveScreen]);

    const handleChange = (event) => {
        const { name, value } = event.target;
        setSettings((prevSettings) => ({
            ...prevSettings,
            [name]: Number(value),
        }));
    };

    const handleOnClickSave = () => {
        setOpenConfirmSaveDialog(true);
    };

    const handleCloseConfirm = () => {
        if (!loadingDialog) {
            setOpenConfirmSaveDialog(false);
        }
    };

    const onSaveProject = () => {
        if (loadingDialog) return;

        setLoadingDialog(true);
        logger.log('Ï†ÄÏû•Îêú ÏÑ§Ï†ï:', settings);
        // Ïó¨Í∏∞Ïóê ÏÑ§Ï†ïÏùÑ Ï†ÄÏû•ÌïòÎäî Î°úÏßÅÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî

        setLoadingDialog(false);
        setOpenConfirmSaveDialog(false);
    };

    return (
        <Container maxWidth={false} className="container-common">
            <h2 className="title-common">Tapping - ÏÑ§Ï†ï</h2>
            <Grid container className="grid-common">
                <Grid item xs={12}>
                    <TableContainer>
                        <Table className="table-common">
                            <TableBody>
                                <TableRow>
                                    <TableCell className="table-cell-header">ÏãúÏûë ÏúÑÏπò(ÎÜíÏù¥)</TableCell>
                                    <TableCell className="table-cell-body">
                                        <TextField
                                            variant="outlined"
                                            name="initialHeight"
                                            onChange={handleChange}
                                            value={settings.initialHeight}
                                        />
                                        mm
                                    </TableCell>
                                </TableRow>
                                <TableRow>
                                    <TableCell className="table-cell-header">Í∞ÄÍ≥µÎ¨º ÎëêÍªò</TableCell>
                                    <TableCell className="table-cell-body">
                                        <TextField
                                            variant="outlined"
                                            name="partThickness"
                                            onChange={handleChange}
                                            value={settings.partThickness}
                                        />
                                        mm
                                    </TableCell>
                                </TableRow>
                                <TableRow>
                                    <TableCell className="table-cell-header">Ï±îÌçº Í∏∏Ïù¥</TableCell>
                                    <TableCell className="table-cell-body">
                                        <TextField
                                            variant="outlined"
                                            name="chamferLength"
                                            onChange={handleChange}
                                            value={settings.chamferLength}
                                        />
                                        mm
                                    </TableCell>
                                </TableRow>
                                <TableRow>
                                    <TableCell className="table-cell-header">Í∞ÄÍ≥µ Ïó¨Ïú†</TableCell>
                                    <TableCell className="table-cell-body">
                                        <TextField
                                            variant="outlined"
                                            name="machiningAllowance"
                                            onChange={handleChange}
                                            value={settings.machiningAllowance}
                                        />
                                        mm
                                    </TableCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                        <Toolbar className="toolbar-common">
                            <Button variant="contained" className="button-save" onClick={handleOnClickSave}>
                                Ï†ÄÏû•
                            </Button>
                        </Toolbar>
                    </TableContainer>
                </Grid>
            </Grid>
            <DialogCommon
                openDialog={openConfirmSaveDialog}
                handleCloseDialog={handleCloseConfirm}
                type="confirm"
                content="save"
                messageContent="Ï†ÄÏû• ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
                loading={loadingDialog}
                handleConfirm={onSaveProject}
            />
        </Container>
    );
};

export default Setting;
